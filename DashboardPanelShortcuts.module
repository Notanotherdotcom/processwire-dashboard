<?php namespace ProcessWire;

class DashboardPanelShortcuts extends DashboardPanel {

    public static function getModuleInfo() {
        return array_merge(parent::getModuleInfo(),
            [
                'title'    => __('Dashboard Panel: Shortcuts', __FILE__),
                'summary'  => __('Display a list of shortcuts to admin pages', __FILE__),
                'author'   => 'Philipp Daun',
                'version'  => DASHBOARD_VERSION,
            ]
        );
    }

    const displayOptions = [
        'grid',
        'list',
    ];

    const defaultDisplayOption = 'grid';

    public function getIcon() {
        return 'flash';
    }

    public function getTitle() {
        return $this->_('Shortcuts');
    }

    public function getClassNames() {
        return ["{$this}--{$this->display}"];
    }

    public function getContent() {
        if (!($this->shortcuts && count($this->shortcuts))) {
            return;
        }

        $rows = array_map(function ($shortcut, $key) {
            $page = null;
            $pageIcon = '';
            $title = '';
            $summary = '';
            $url = '';
            $icon = '';

            // Passed array? Extract to shortcut, icon and summary
            // e.g. [1020, 'user', 'Edit your profile']
            if (is_array($shortcut)) {
                list($shortcut, $icon, $summary) = $shortcut;
            }

            // Get URL from shortcut if page/id/selector given,
            // otherwise treat shortcut as URL string
            if (is_object($shortcut) && $shortcut instanceof Page) {
                $page = $shortcut;
            } else if (is_int($shortcut)) {
                $page = $this->pages->get($shortcut);
            } else if (is_string($shortcut)) {
                if (Selectors::stringHasSelector($shortcut)) {
                    $page = $this->pages->get($shortcut);
                } else {
                    $url = $shortcut;
                }
            }

            if ($page) {
                if (!$page->viewable()) {
                    return;
                }
                $info = $this->getPageInfo($page);
                $title = is_string($key) ? $key : $info->title;
                $summary = $summary ?: $info->summary;
                $pageIcon = $info->icon;
                $url = $page->url;
            } else if ($url) {
                $title = $key;
            } else {
                return;
            }

            $icon = $this->renderPageIcon($icon ?: $pageIcon);
            $title = $this->sanitizer->entities1($title);
            $summary = $this->sanitizer->entities1($summary);
            $linkClass = $summary && $this->display === 'grid' ? 'tooltip' : '';

            return
                "<li>
                    <a href='{$url}' class='{$linkClass}' title='{$summary}'>
                        <span>
                            {$icon}
                            <span class='title'>{$title}</span>
                        </span>
                        <span>
                            <span class='summary' title='{$summary}'>{$summary}</span>
                        </span>
                    </a>
                </li>";
        }, $this->shortcuts, array_keys($this->shortcuts));

        $output = join('', $rows);
        return "<ul data-display='{$this->display}'>{$output}</ul>";
    }

    protected function renderPageIcon($icon) {
        if ($this->icon !== null) {
            $icon = $this->icon;
        }
        $icon = $icon ?: $this->fallbackIcon;
        return $icon ? wireIconMarkup($icon, 'fw') : '';
    }

    protected function getPageInfo($page) {
        $adminTheme = $this->wire('adminTheme');
        $hasInfoMethods = ($adminTheme && $adminTheme instanceof AdminThemeFramework);

        $title = '';
        $icon = '';
        $summary = '';

        if ($page->template == 'admin') {
            if ($page->process) {
                $info = $this->modules->getModuleInfoVerbose($page->process);
                $summary = $page->summary ?: ($info['summary'] ?? '');
                $icon = $info['icon'] ?? '';
            }
            $icon = $page->getIcon() ?: $icon;
            $title = $hasInfoMethods ? $adminTheme->getPageTitle($page) : '';
            if (!$icon) switch($page->id) {
                case 22: $icon = 'gears'; break; // Setup
                case 21: $icon = 'plug'; break; // Modules
                case 28: $icon = 'key'; break; // Access
            }
        }
        if (!$title) {
            $title = $page->get('title|name');
        }
        if (!$icon) {
            $icon = $page->getIcon();
        }

        return (object) compact(
            'title',
            'summary',
            'icon'
        );
    }

    public function setup() {
        parent::setup();
        $this->shortcuts = $this->data['shortcuts'] ?? [];
        $this->display = $this->sanitizer->option($this->data['display'] ?? '', self::displayOptions) ?: self::defaultDisplayOption;
        $this->fallbackIcon = $this->data['fallbackIcon'] ?? 'bookmark-o';
        $this->icon = $this->data['icon'] ?? null;
    }
}
