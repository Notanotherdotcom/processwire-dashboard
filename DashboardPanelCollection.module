<?php

namespace ProcessWire;

// Include abstract panel base class
require_once dirname(__DIR__).'/Dashboard/DashboardPanel.class.php';

class DashboardPanelCollection extends DashboardPanel
{
    public static function getModuleInfo()
    {
        return array_merge(parent::getModuleInfo(),
            [
                'title'    => __('Dashboard Panel: Collection', __FILE__),
                'summary'  => __('Display a collection of pages in a table', __FILE__),
                'author'   => 'Philipp Daun',
                'version'  => '0.6.9',
            ]
        );
    }

    public function getIcon()
    {
        return 'files-o';
    }

    public function getTitle()
    {
        $count = $this->collection->count;

        return sprintf($this->_n('%d Page', '%d Pages', $count), $count);
    }

    public function getContent()
    {
        $datetime = new WireDateTime();

        if ($this->actions !== false) {
            $this->columns['actions__'] = ''; // $this->_('Actions');
        }

        $columnNames = array_keys($this->columns);
        $columnHeadlines = array_values($this->columns);

        $classNames = array_map(function ($column) {
            return 'DashboardTableColumn__'.$this->sanitizer()->snakeCase($column);
        }, $columnNames);

        $headers = array_map(function ($column, $class) {
            if (strpos($column, 'fa-') === 0) {
                return $this->renderIcon($column);
            }

            return [$column, $class];
        }, $columnHeadlines, $classNames);

        $rows = array_map(function ($page) use ($columnNames, $classNames, $datetime) {
            $row = array_map(function ($markup, $class) use ($datetime, $page) {
                $field = $this->fields->get($markup);
                $fieldtype = $field ? "$field->type" : null;
                $content = null;

                // Special case: action links
                if ($markup === 'actions__') {
                    $content = $this->renderPageActions($page);
                }
                // Special case: page icon
                elseif ($markup === 'page_icon') {
                    $content = $this->renderIcon($page->getIcon());
                }
                // Special case: system timestamps
                elseif (in_array($markup, ['modified', 'created'])) {
                    $content = $datetime->date($this->dateFormat, $page->$markup);
                }
                // Special case: image fields
                elseif ($fieldtype == 'FieldtypeImage') {
                    $class .= ' is-image-column';
                    $images = $page->get($markup)->slice(0, $this->maxImageNum);
                    $content = $this->renderImageThumbnails($images);
                }
                // Special case: color fields
                elseif ($fieldtype == 'FieldtypeColorPicker') {
                    $class .= ' is-color-column';
                    $color = $page->getFormatted($markup);
                    $content = "<span style='background-color:{$color}'></span>";
                }
                // Special case: timestamp fields
                // disabled for now (formatted datetime values work just as well)
                elseif (false && $fieldtype == 'FieldtypeDatetime') {
                    $content = $datetime->date($this->dateFormat, $page->getUnformatted($markup));
                }
                // All others
                if ($content === null) {
                    $content = $page->getText($markup, false, true); // $oneLine, $entities
                }

                return [$content, $class];
            }, $columnNames, $classNames);

            return $row;
        }, $this->collection->getArray());

        if ($this->showHeaders) {
            array_unshift($rows, $headers);
        }

        return $this->renderTable($rows, [
            'header'   => $this->showHeaders,
            'sortable' => $this->sortable,
            'class'    => $this->actions !== false ? 'has-actions' : 'has-no-actions',
        ]);
    }

    public function getFooter()
    {
        $footer = '';

        // Buttons (add new)
        $buttons = $this->renderFooterButtons();
        if ($buttons) {
            $footer .= "<div>{$buttons}</div>";
        }

        // Pagination
        if ($this->pagination && $this->collection->hasPagination()) {
            $pagination = sprintf(
                $this->_('Showing %d of %d'),
                $this->collection->count,
                $this->collection->getTotal()
            );
            $footer .= "<div>{$pagination}</div>";
        }

        return $footer ? "<div>{$footer}</div>" : '';
    }

    public function setup()
    {
        parent::setup();

        $this->editURL = $this->config->urls->admin.'page/edit/';
        $this->addURL = $this->config->urls->admin.'page/add/';
        $this->listURL = $this->config->urls->admin.'page/list/';

        $this->collection = $this->data['collection'] ?? null;
        $this->columns = $this->data['columns'] ?? [
            'title' => $this->_('Title'),
            'url'   => $this->_('URL'),
        ];
        $this->actions = $this->data['actions'] ?? null;
        $this->pagination = $this->data['pagination'] ?? true;
        $this->sortable = $this->data['sortable'] ?? false;
        $this->showHeaders = $this->data['headers'] ?? true;
        $this->dateFormat = $this->data['dateFormat'] ?? 'relative';
        $this->maxImageNum = $this->data['maxImageNum'] ?? 1;
        $this->parent = $this->getPageFromObjectOrSelectorOrID($this->data['parent'] ?? null);
        $this->template = $this->templates->get($this->data['template'] ?? null);
        $this->listPage = $this->getPageFromObjectOrSelectorOrID($this->data['list'] ?? null);
        $this->editMode = $this->data['editMode'] ?? self::windowModeBlank;
        $this->viewMode = $this->data['viewMode'] ?? self::windowModeBlank;

        if (is_string($this->collection)) {
            $this->collection = $this->pages->find($this->collection);
        }

        if (!$this->collection) {
            $this->collection = new PageArray();
        }

        if (is_array($this->actions) && !count($this->actions)) {
            $this->actions = false;
        }

        return true;
    }

    /**
     * Render footer buttons
     * Taken from PageLister, so it should work for most cases.
     */
    protected function renderFooterButtons()
    {
        $action = '';
        $out = '';

        if ($this->parent && $this->parent->id && $this->parent->addable()) {
            $action = "{$this->addURL}?parent_id={$this->parent->id}";
        } elseif ($this->template && ($parent = $this->template->getParentPage(true))) {
            if ($parent->id) {
                $action = "{$this->addURL}?parent_id={$parent->id}";
            } // defined parent
            else {
                $action = "{$this->addURL}?template_id={$this->template->id}";
            } // multiple possible parents
        }

        if ($action) {
            $mode = $this->editMode;
            $addButtonOptions = [
                'icon'               => 'plus-circle',
                'secondary'          => true,
                'modal'              => self::windowModeModal === $mode,
                'blank'              => self::windowModeBlank === $mode,
                'modalButtons'       => self::modalButtons,
                'modalAutoclose'     => self::modalAutocloseAdd,
                'reloadOnModalClose' => true,
            ];
            if (self::windowModeModal === $mode) {
                $action = $this->setQueryParameter($action, 'modal', 1);
            }

            $out .= $this->renderFooterButton($action, $this->_('Add New'), $addButtonOptions);
        }

        $action = '';

        if ($this->listPage && $this->listPage->id) {
            if ($this->listPage->template == 'admin') {
                $action = "{$this->listPage->url}"; // admin process page
            } else {
                $action = "{$this->listURL}?open={$this->listPage->id}"; // open page list at this page
            }
        } elseif ($this->parent && $this->parent->id) {
            $action = "{$this->listURL}?open={$this->parent->id}"; // open page list at parent page
        }

        if ($action) {
            $mode = $this->viewMode;
            $viewButtonOptions = [
                'icon'      => 'search-plus',
                'secondary' => true,
                'modal'     => self::windowModeModal === $mode,
                'blank'     => self::windowModeBlank === $mode,
            ];
            if (self::windowModeModal === $mode) {
                $action = $this->setQueryParameter($action, 'modal', 1);
            }
            $out .= $this->renderFooterButton($action, $this->_('View All'), $viewButtonOptions);
        }

        return $out;
    }

    /**
     * Get actions for given page.
     */
    protected function getPageActions(Page $page)
    {
        $actions = [];
        if ($this->actions === false) {
            return $actions;
        }

        if ($this->actions === null || in_array('edit', $this->actions)) {
            $actions['edit'] = [
                'href'     => $page->editUrl,
                'label'    => $this->_('Edit'),
                'icon'     => 'pencil',
                'mode'     => $this->editMode,
                'reload'   => true,
                'disabled' => !$page->editable,
            ];
        }

        if ($this->actions === null || in_array('view', $this->actions)) {
            $actions['view'] = [
                'href'     => $page->url,
                'label'    => $this->_('View'),
                'icon'     => 'eye',
                'mode'     => $this->viewMode,
                'disabled' => !$page->viewable,
            ];
        }

        return $actions;
    }

    /**
     * Render action links for given page.
     */
    protected function renderPageActions(Page $page)
    {
        $actions = $this->getPageActions($page);
        $links = array_map(function ($action) {
            $icon = $this->renderIcon($action['icon'] ?? '');
            if ($action['disabled'] ?? false) {
                return $icon;
            }
            $attr = (array) ($action['attributes'] ?? []);
            $mode = $action['mode'] ?? false;
            $class = $action['class'] ?? '';
            if (self::windowModeModal === $mode) {
                $this->includeModalScripts();
                $class .= 'pw-modal pw-modal-large';
                $action['href'] = $this->setQueryParameter($action['href'], 'modal', 1);
                $attr['data-buttons'] = self::modalButtons;
                $attr['data-autoclose'] = self::modalAutocloseEdit;
                if ($action['reload'] ?? false) {
                    $attr['data-reload-on-close'] = true;
                }
            }
            if (self::windowModeBlank === $mode) {
                $attr['target'] = '_blank';
            }

            return $this->renderTooltipLink(
                $action['href'],
                $class,
                $icon,
                $action['label'] ?? '',
                $attr
            );
        }, $actions);

        return implode(' ', $links);
    }

    /**
     * Render a link with tooltip.
     */
    protected function renderTooltipLink($href, $class, $label, $description, $attributes = [])
    {
        $attributes = $this->renderAttributes($attributes);

        return "<a href='$href' class='tooltip $class' title='$description' $attributes>$label</a>";
    }

    /**
     * Render image thumbnails.
     */
    protected function renderImageThumbnails($images)
    {
        $imgModule = $this->modules->get('InputfieldImage');
        $thumbnails = array_map(function ($image) use ($imgModule) {
            $thumb = $imgModule->getAdminThumb($image);

            return $thumb['markup'] ?? '';
        }, $images->getArray());

        return implode(' ', $thumbnails);
    }
}
