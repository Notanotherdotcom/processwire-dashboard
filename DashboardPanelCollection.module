<?php namespace ProcessWire;

class DashboardPanelCollection extends DashboardPanel {

    public static function getModuleInfo() {
        return array_merge(parent::getModuleInfo(),
            [
                'title'    => __('Dashboard Panel: Collection', __FILE__),
                'summary'  => __('Display a collection of pages in a table', __FILE__),
                'author'   => 'Philipp Daun',
                'version'  => DASHBOARD_VERSION,
            ]
        );
    }

    public function getIcon() {
        return 'files-o';
    }

    public function getTitle() {
        $count = $this->collection->count;
        return sprintf($this->_n('%d Page', '%d Pages', $count), $count);
    }

    public function getContent() {
        $datetime = new WireDateTime;

        if ($this->actions !== false) {
            $this->columns['actions__'] = ''; // $this->_('Actions');
        }

        $columnNames = array_keys($this->columns);
        $columnHeadlines = array_values($this->columns);

        $classNames = array_map(function ($column) {
            return 'DashboardTableColumn__' . $this->sanitizer()->snakeCase($column);
        }, $columnNames);

        $headers = array_map(function ($column, $class) {
            if (strpos($column, 'fa-') === 0) {
                return $this->renderIcon($column);
            }
            return [$column, $class];
        }, $columnHeadlines, $classNames);

        $rows = array_map(function ($page) use ($columnNames, $classNames, $datetime) {
            $row = array_map(function ($markup, $class) use ($datetime, $page) {
                $field = $this->fields->get($markup);
                $fieldtype = $field ? "$field->type" : null;
                $content = null;

                // Special case: action links
                if ($markup === 'actions__') {
                    $content = $this->renderPageActions($page);
                }
                // Special case: page icon
                else if ($markup === 'page_icon') {
                    $content = $this->renderIcon($page->getIcon());
                }
                // Special case: system timestamps
                else if (in_array($markup, ['modified', 'created'])) {
                    $content = $datetime->date($this->dateFormat, $page->$markup);
                }
                // Special case: image fields
                else if ($fieldtype == 'FieldtypeImage') {
                    $class .= ' is-image-column';
                    $images = $page->get($markup)->slice(0, $this->maxImageNum);
                    $content = $this->renderImageThumbnails($images);
                }
                // Special case: color fields
                else if ($fieldtype == 'FieldtypeColorPicker') {
                    $class .= ' is-color-column';
                    $content = "<span style='background-color:{$page->$markup}'></span>";
                }
                // Special case: timestamp fields
                // disabled for now (formatted datetime values work just as well)
                else if (false && $fieldtype == 'FieldtypeDatetime') {
                    $content = $datetime->date($this->dateFormat, $page->getUnformatted($markup));
                }
                // All others
                if ($content === null) {
                    $content = $page->getText($markup, false, true); // $oneLine, $entities
                }

                return [$content, $class];
            }, $columnNames, $classNames);
            return $row;
        }, $this->collection->getArray());

        if ($this->showHeaders) {
            array_unshift($rows, $headers);
        }

        return $this->renderTable($rows, [
            'header' => $this->showHeaders,
            'sortable' => $this->sortable,
            'class' => $this->actions !== false ? 'has-actions' : 'has-no-actions',
        ]);
    }

    public function getFooter() {
        $footer = '';

        // Buttons (add new)
        $buttons = $this->renderButtons();
        if ($buttons) {
            $footer .= "<div>{$buttons}</div>";
        }

        // Pagination
        if ($this->pagination && $this->collection->hasPagination()) {
            $pagination = sprintf(
                $this->_('Showing %d of %d'),
                $this->collection->count,
                $this->collection->getTotal()
            );
            $footer .= "<div>{$pagination}</div>";
        }

        return $footer ? "<div>{$footer}</div>" : '';
    }

    public function setup() {
        parent::setup();

        $this->editURL = $this->config->urls->admin . 'page/edit/';
        $this->addURL = $this->config->urls->admin . 'page/add/';
        $this->listURL = $this->config->urls->admin . 'page/list/';

        $this->collection = $this->data['collection'] ?? null;
        $this->columns = $this->data['columns'] ?? [
            'title' => $this->_('Title'),
            'url' => $this->_('URL'),
        ];
        $this->actions = $this->data['actions'] ?? null;
        $this->pagination = $this->data['pagination'] ?? true;
        $this->sortable = $this->data['sortable'] ?? false;
        $this->showHeaders = $this->data['headers'] ?? true;
        $this->dateFormat = $this->data['dateFormat'] ?? 'relative';
        $this->maxImageNum = $this->data['maxImageNum'] ?? 1;
        $this->parent = $this->getPageFromObjectOrSelectorOrID($this->data['parent'] ?? null);
        $this->template = $this->templates->get($this->data['template'] ?? null);
        $this->listPage = $this->getPageFromObjectOrSelectorOrID($this->data['list'] ?? null);
        $this->editMode = $this->data['editMode'] ?? 'blank';

        if (is_string($this->collection)) {
            $this->collection = $this->pages->find($this->collection);
        }

        if (!$this->collection) {
            $this->collection = new PageArray();
        }

        if (is_array($this->actions) && !count($this->actions)) {
            $this->actions = false;
        }

        return true;
    }

    /**
     * Render footer buttons
     * Taken from PageLister, so it should work for most cases
     *
     */
    protected function renderButtons() {
        $action = '';
        $out = '';

        if ($this->parent && $this->parent->id && $this->parent->addable()) {
            $action = "{$this->addURL}?parent_id={$this->parent->id}";
        } else if ($this->template && ($parent = $this->template->getParentPage(true))) {
            if ($parent->id) $action = "{$this->addURL}?parent_id={$parent->id}"; // defined parent
            else $action = "{$this->addURL}?template_id={$this->template->id}"; // multiple possible parents
        }

        if ($action) {
            $btn = $this->wire('modules')->get('InputfieldButton');
            $btnClass = 'PageAddNew';
            if ($this->editMode === 'modal') {
                $action .= "&modal=1";
                $btnClass .= " modal";
            }
            $btn->attr('value', $this->_('Add New'));
            $btn->href = $action;
            $btn->icon = 'plus-circle';
            $btn->secondary = true;
            $btn->small = true;
            $btn->aclass = $btnClass;
            $out .= $btn->render();
            if ($this->editMode === 'blank') $out = str_replace("<a ", "<a target='_blank' ", $out);
        }

        $action = '';

        if ($this->listPage && $this->listPage->id) {
            if ($this->listPage->template == 'admin') {
                $action = "{$this->listPage->url}"; // admin process page
            } else {
                $action = "{$this->listURL}?open={$this->listPage->id}"; // open page list at this page
            }
        } else if ($this->parent && $this->parent->id) {
            $action = "{$this->listURL}?open={$this->parent->id}"; // open page list at parent page
        }

        if ($action) {
            $btn = $this->wire('modules')->get('InputfieldButton');
            $btnClass = '';
            if ($this->editMode === 'modal') {
                $action .= "&modal=1";
                $btnClass .= " modal";
            }
            $btn->attr('value', $this->_('View All'));
            $btn->href = $action;
            $btn->icon = 'search-plus';
            $btn->secondary = true;
            $btn->small = true;
            $btn->aclass = $btnClass;
            $out .= $btn->render();
            if ($this->editMode === 'blank') $out = str_replace("<a ", "<a target='_blank' ", $out);
        }

        return $out;
    }

    /**
     * Get actions for given page
     *
     */
    protected function getPageActions(Page $page) {
        $actions = [];
        if ($this->actions === false) {
            return $actions;
        }

        if ($this->actions === null || in_array('edit', $this->actions)) {
            $actions['edit'] = [
                'href' => $page->editUrl,
                'label' =>  $this->_('Edit'),
                'icon' => 'pencil',
                'newtab' => true,
                'disabled' => !$page->editable,
            ];
        }

        if ($this->actions === null || in_array('view', $this->actions)) {
            $actions['view'] = [
                'href' => $page->url,
                'label' =>  $this->_('View'),
                'icon' => 'eye',
                'newtab' => true,
                'disabled' => !$page->viewable,
            ];
        }

        return $actions;
    }

    /**
     * Render action links for given page
     *
     */
    protected function renderPageActions(Page $page) {
        $actions = $this->getPageActions($page);
        $links = array_map(function ($action) {
            $icon = $this->renderIcon($action['icon']);
            if (@$action['disabled']) {
                return $icon;
            }
            return $this->renderTooltipLink(
                $action['href'],
                $action['class'] ?? '',
                $icon,
                $action['label'],
                @$action['newtab'] ? '_blank' : ''
            );
        }, $actions);
        return implode('  ', $links);
    }

    /**
     * Render a link with tooltip
     *
     */
    protected function renderTooltipLink($href, $class, $label, $description, $target = '') {
        return "<a href='$href' class='tooltip $class' title='$description' target='$target'>$label</a>";
    }

    /**
     * Render image thumbnails
     *
     */
    protected function renderImageThumbnails($images) {
        $imgModule = $this->modules->get('InputfieldImage');
        $thumbnails = array_map(function ($image) use ($imgModule) {
            $thumb = $imgModule->getAdminThumb($image);
            return $thumb['markup'] ?? '';
        }, $images->getArray());
        return join(' ', $thumbnails);
    }
}
